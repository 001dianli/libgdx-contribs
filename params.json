{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"My contributions and utilities for the awesome libgdx game development framework","body":"libgdx-contribs\r\n===============\r\n\r\nMy contributions and utilities for the awesome libgdx game development framework.\r\nProject files and instructions are for Eclipse 3.7.2 (Indigo) or higher, but others may work as well with some adaptation.\r\n\r\n## post-processing ##\r\n\r\nA lightweight library to ease development and inclusion of post-processing effects in libgdx applications and games.\r\n\r\n\r\n### Cloning and importing the projects in Eclipse ###\r\n\r\nYou should be able to start using the post-processor and its bundled effects in a few minutes, start by cloning the *libgdx-contribs* project in your preferred directory:\r\n\r\n    blah blah\r\n\r\nThen you need to import two projects, **libgdx-contribs-utils** and **libgdx-contribs-postprocessing**.\r\n\r\nIn Eclipse, *File->Import* and point it to the *utils* folder, accept the defaults or change to your likings and import the project, then do the same with the *postprocessing* folder.\r\nAt this point you should have both projects built, if *Build automatically* has been setup in your workspace, else build them manually.\r\n\r\n*__Congrats!__ You can now start add some postprocessing eyecandy to your project, or continue reading if you want to try out the bundled demo application.*\r\n\r\n### Demo application ###\r\n\r\nYou may want to explore some of the bundled effects to get a taste of what the library can do and if its good for your project: there is demo project inside the *postprocessing* folder, just *File->Import* again and point it to the `postprocessing/demo` folder to import it into your workspace.\r\n\r\nHere are some screenshots from the demo application, or you can see it in action on [YouTube](http://youtu.be/TNMwUKiR5fY):","google":"UA-33324468-1","name":"libgdx-contribs"}